@model Atom.Models.BlogAddModel

@{
    ViewBag.Title = "Create";
    AjaxOptions ajaxOpts = new AjaxOptions();
}
<div class="form-horizontal" id="iid">
@using (Html.BeginForm("Create","Blog",FormMethod.Post,new {id="form"}))
{
    <div class="row">
        <div class="col-md-4">
            @switch (Model.Type)
            {
                case 0: <h2>Error</h2>; break;
                case 1: <h2>Добавить новость</h2>; break;
                case 2: <h2>Добавить анонс</h2>; break;
                case 3: <h2>Добавить статью</h2>; break;
                default: <h2>Error</h2>; break;
            }
        </div>
        @*<div id="add-effect"><span class="glyphicon glyphicon-camera" style="color:blue"></span></div>*@

        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="col-md-8">
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-12">
                @*@Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.TextAreaFor(model => model.Content, htmlAttributes: new
           {
               id = "textarea",
               @class = "form-control",
               rows = "10",
               placeholder = @"Текст вида:
Абзац1
<img=1.jpg> - одиночное изображение
Абзац2
<img=1.jpg>
<img=2.jpg>
<img=3.jpg> - группа изображений"
           })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>
        <input type="hidden" name="imgStartIndex" />
        <input type="hidden" name="typeInfo" value="@Model.Type" />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Create" class="btn btn-default" name="sub"/>
            </div>
        </div>
    }
</div>
@using (Ajax.BeginForm("CreatePictures", ajaxOpts))
{
    <div id="ajax">
    @Html.Action("CreatePictures")
    </div>
}
<script src="~/Scripts/create.js"></script>
@Ajax.ActionLink("Аякс", "Create", new AjaxOptions() { Url = Url.Action("CreateJsonPictures"), OnSuccess = "processData" })

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
